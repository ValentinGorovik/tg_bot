import os
import json
import sqlite3
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, executor

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot       = Bot(token=BOT_TOKEN)
dp        = Dispatcher(bot)
DB        = "heroes.db"

def init_db():
    conn = sqlite3.connect(DB)
    cur  = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS heroes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nick TEXT,
            gender TEXT,
            race TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

def save_hero(data: dict):
    conn = sqlite3.connect(DB)
    cur  = conn.cursor()
    cur.execute(
        "INSERT INTO heroes (nick, gender, race) VALUES (?, ?, ?)",
        (data.get('nick'), data.get('gender'), data.get('race'))
    )
    conn.commit()
    conn.close()
    print("üíæ Hero saved to DB:", data)

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –í–°–Å
@dp.message_handler(content_types=types.ContentType.ANY)
async def debug_all(message: types.Message):
    print("\n=== GOT MESSAGE ===")
    print("type:", message.content_type)
    print("text:", message.text)
    print("web_app_data:", getattr(message, "web_app_data", None))
    print("full object:", message)
    # –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º —Ç—É—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≥–µ—Ä–æ—è.")

@dp.message_handler(commands=['create'])
async def cmd_create(message: types.Message):
    print("üîπ /create received")
    webapp_url = "https://valentingorovik.github.io/tg_bot/index.html"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(
        text="üöÄ –°–æ–∑–¥–∞—Ç—å –≥–µ—Ä–æ—è",
        web_app=types.WebAppInfo(url=webapp_url)
    ))
    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É:", reply_markup=kb)

# –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–∞ —Å—Ç—Ä–æ–∫—É 'web_app_data'
@dp.message_handler(content_types=['web_app_data'])
async def webapp_handler(message: types.Message):
    print("üî• web_app_data handler called!")
    raw = message.web_app_data.data
    print("üì® raw data string:", raw)
    try:
        data = json.loads(raw)
    except Exception as e:
        print("‚ùå JSON parse error:", e)
        return await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    print("‚úÖ Parsed payload:", data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–≤–µ—á–∞–µ–º
    save_hero(data)
    await message.answer(f"‚úÖ –ì–µ—Ä–æ–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {data}")

if __name__ == '__main__':
    print("üóÑ  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É‚Ä¶")
    init_db()
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞‚Ä¶")
    # –ù–ï –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∏–∫–∞–∫–∏–µ –Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    executor.start_polling(dp, skip_updates=False)
